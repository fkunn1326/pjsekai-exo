--version: {version}
@設定
--file:
--track0:オフセット,-10000,10000,0,1
--track1:キャッシュ,0,1,1,1

if obj.track1 ~= 1 or not PED_DATA or PED_DATA.file ~= file then
  debug_print("[pjsekai-exo] Loading ped data in " .. file)
  time = os.clock()
  PED_DATA = {}
  PED_DATA.scores = {}
  PED_DATA.path = nil
  PED_DATA.version = nil
  PED_DATA.version_status = "none"
  PED_DATA.ap = false
  PED_DATA.file = file
  PED_DATA.cache_number = obj.track1
  PED_DATA.current = nil
  local fp = io.open(file, "r")
  if fp then
    PED_DATA.loaded = "invalid"
    for line in fp:lines() do
      local header, data = string.match(line, "([a-z]+)|(.+)")
      if header ~= nil then
        PED_DATA.loaded = "ok"
        if header == "s" then
          local nmatch = {string.match(data, "([%-0-9.]+):([%-0-9.]+):([%-0-9.]+):([%-0-9.]+):([nabcs]+):([%-0-9.]+)")}
          PED_DATA.scores[#PED_DATA.scores + 1] = {
            time = tonumber(nmatch[1]),
            score = tonumber(nmatch[2]),
            offset = tonumber(nmatch[3]),
            width = tonumber(nmatch[4]),
            rank = nmatch[5],
            combo = tonumber(nmatch[6])
          }
        elseif header == "p" then -- パス
          PED_DATA.path = data
        elseif header == "a" then -- AP
          PED_DATA.ap = data == "true"
        elseif header == "v" then -- バージョン
          PED_DATA.version = data
        end
      end
    end
    debug_print("[pjsekai-exo] Successfully loaded ped data")
    debug_print("[pjsekai-exo] Time: " .. os.clock() - time)
    fp:close()
  else
    PED_DATA.loaded = "not_found"
    debug_print("[pjsekai-exo] Couldn't find ped data file")
  end
end
if PED_DATA.version == "{version}" or "{version}" == "{ver".."sion}" then
  OFFSET = obj.track0
  PED_DATA.current = {
    time = 0,
    score = 0,
    offset = 0,
    width = 0,
    rank = "n",
    combo = 0,
  }
  for i = #PED_DATA.scores, 1, -1 do
    local score = PED_DATA.scores[i]
    -- debug_print((score.time * obj.framerate))
    -- debug_print(obj.frame - OFFSET)
    -- debug_print("===")
    if (score.time * obj.framerate) < (obj.frame - OFFSET) then
      PED_DATA.current = score
      break
    end
  end
  PED_DATA.version_status = "ok"
else
  obj.setfont("メイリオ", 32)
  if PED_DATA.loaded == "not_found" then
    obj.load(
      "text",
      "<s32,メイリオ,B>(! 読み込み失敗 !)\n<s>"..
      "pedファイルが見付かりません！"
    )
  elseif PED_DATA.loaded == "invalid" then
    obj.load(
      "text",
      "<s32,メイリオ,B>(! 読み込み失敗 !)\n<s>"..
      "pedファイルを読み取れません！"
    )
  elseif PED_DATA.version == nil then
    obj.load(
      "text",
      "<s32,メイリオ,B>(! 読み込み失敗 !)\n<s>"..
      "pedファイルのバージョンが設定されていません！"
    )
  else
    obj.load(
      "text",
      "<s32,メイリオ,B>(! 読み込み失敗 !)\n<s>"..
      "pedファイルとのバージョンが違います！\n"..
      "オブジェクトファイルは{{version}}、pedファイルは"..PED_DATA.version.."です。"
    )
  end
  obj.draw()
  PED_DATA.version_status = "ng"
end
----------------------------------------------------------------
@スコア
if PED_DATA.version_status == "ok" then
  obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
  obj.load("image", PED_DATA.path.."\\score\\inner.png")
  obj.draw(-387, -317, 0, 0.7)
  obj.setoption("blend", "alpha_sub")
  obj.load("figure", "四角形")
  obj.drawpoly(
    -387 - 185 + 427 * PED_DATA.current.width, -350, 0,
    -387 + 242, -350, 0,
    -387 + 242, -300, 0,
    -387 - 185 + 427 * PED_DATA.current.width, -300, 0)
  obj.setoption("blend", 0)
  obj.copybuffer("cache:score_bar_inner", "tmp")

  obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
  -- score background
  obj.load("image", PED_DATA.path.."\\score\\score.png")
  obj.draw(-387, -317, 0, 0.7)

  -- score bar inner
  obj.copybuffer("obj", "cache:score_bar_inner")
  obj.draw()

  -- score bar
  obj.load("image", PED_DATA.path.."\\score\\bars.png")
  obj.draw(-387, -317, 0, 0.7)

  -- score rank
  if PED_DATA.current.rank ~= "n" then
    obj.load("image", PED_DATA.path.."\\score\\"..PED_DATA.current.rank..".png")
    obj.draw(-607, -317, 0, 0.7)
  end

  -- score digits
  local score_str = "nnnnnnnn"..tostring(PED_DATA.current.score)
  local digit
  if PED_DATA.current.score == 0 then
    score_str = "nnnnnnnn"
  end

  ---- background
  for c = -8, -1 do
    digit = string.gsub(score_str:sub(c, c), "n", "0")
    obj.load("image", PED_DATA.path.."\\score\\b_"..digit..".png")
    obj.draw(-559 + 24 * (8 + c), -297, 0, 0.7)
  end

  ---- foreground
  for c = -8, -1 do
    digit = score_str:sub(c, c)
    obj.load("image", PED_DATA.path.."\\score\\f_"..digit..".png")
    obj.draw(-559 + 24 * (8 + c), -297, 0, 0.7)
  end

  -- score diff
  if (
    PED_DATA.current.offset > 0 and
    ((obj.frame - OFFSET) - (PED_DATA.current.time * obj.framerate)) < obj.framerate
  ) then
    local add_str
    local offset
    local progress
    add_str = "p"..tostring(PED_DATA.current.offset)
    progress = (((obj.frame - OFFSET) - (PED_DATA.current.time * obj.framerate)) / 8)
    if progress > 1 then
      progress = 1
    end
    offset = (1 - progress) * 20
    for c = 1, #add_str do
      digit = add_str:sub(c, c)
      obj.load("image", PED_DATA.path.."\\score\\b_"..digit..".png")
      obj.draw(-379 + 16 * c - offset, -292, 0, 0.65 * 0.7, progress)
    end
    for c = 1, #add_str do
      digit = add_str:sub(c, c)
      obj.load("image", PED_DATA.path.."\\score\\f_"..digit..".png")
      obj.draw(-379 + 16 * c - offset, -292, 0, 0.65 * 0.7, progress)
    end
  end
  obj.copybuffer("obj", "tmp")
end
----------------------------------------------------------------
@コンボ
if PED_DATA.version_status == "ok" then
  local ap_alpha = (math.sin(obj.time * math.pi) + 1) * (1 / 2)
  if ap_alpha > 1 then
    ap_alpha = 1
  end
  if PED_DATA.current.combo > 0 then
    obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
    if PED_DATA.ap then
      obj.load("image", PED_DATA.path.."\\combo\\b_c.png")
      obj.draw(474, -132, 0, 0.7, ap_alpha)
      obj.load("image", PED_DATA.path.."\\combo\\p_c.png")
    else
      obj.load("image", PED_DATA.path.."\\combo\\n_c.png")
    end
    obj.draw(474, -132, 0, 0.7)
    local combo_str
    local alpha
    local fax = 0.678321678321678
    combo_str = tostring(PED_DATA.current.combo)
    for i = 1, #combo_str do
      local digit = combo_str:sub(i, i)
      local shift = -(#combo_str / 2) + i - 0.5
      local progress = (((obj.frame - OFFSET) - (PED_DATA.current.time * obj.framerate)) / 8)
      if progress > 1 then
        alpha = 0.5 - (progress - 1) * 0.5
      else
        alpha = 0.5
      end
      if PED_DATA.ap then
        obj.load("image", PED_DATA.path.."\\combo\\p_"..digit..".png")
      else
        obj.load("image", PED_DATA.path.."\\combo\\n_"..digit..".png")
      end
      obj.setoption("blend", 0)
      obj.draw(474 + 36 * (shift * (progress + 1)), -64, 0, (0.5 + 0.55 * progress) * fax, alpha)
      if progress > 1 then
        progress = 1
      end
      if PED_DATA.ap then
        obj.load("image", PED_DATA.path.."\\combo\\b_"..digit..".png")
        obj.setoption("blend", 0)
        obj.draw(474 + 36 * (shift * (progress + 1)), -64, 0, (0.5 + 0.5 * progress) * fax, ap_alpha)
        obj.load("image", PED_DATA.path.."\\combo\\p_"..digit..".png")
        if progress > 0.9 then
          obj.effect("グロー", "強さ",  progress * 12, "ぼかし", 5)
          obj.effect("ライト", "強さ",  progress * 30, "逆光", 1)
        end
      end
      obj.setoption("blend", 0)
      obj.draw(474 + 36 * (shift * (progress + 1)), -64, 0, (0.5 + 0.5 * progress) * fax)
    end
    obj.copybuffer("obj", "tmp")
  end
end
----------------------------------------------------------------
@判定
if PED_DATA.version_status == "ok" then
  obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
  if PED_DATA.current.time > 0 then
    local progress = (((obj.frame - OFFSET) - (PED_DATA.current.time * obj.framerate)) / 4)
    if progress < 1 then
      obj.load("image", PED_DATA.path.."\\perfect.png")
      obj.draw(0, 90, 0, 0.3 + 0.4 * progress, progress)
    elseif progress < 5 then
      obj.load("image", PED_DATA.path.."\\perfect.png")
      obj.draw(0, 90, 0, 0.7, 1)
    end
  end
  obj.copybuffer("obj", "tmp")
end
----------------------------------------------------------------
@AP
function clamp(x, min, max)
  if x < min then
    return min
  elseif x > max then
    return max
  else
    return x
  end
end
POSITIONS = {
  -390,
  -312,
  -241,
  -127,
  -50,
  27,
  100,
  173,
  249,
  328,
  383,
  417,
}
IMAGES = {
  "A", "L1", "L2", "P", "E1", "R", "F", "E2", "C", "T", "!1", "!2",
}
obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
for i = 1, #IMAGES do
  local image = IMAGES[i]
  local position = POSITIONS[i]
  obj.load("image", PED_DATA.path.."\\ap\\"..image..".png")
  position = position * ((obj.frame - i * 2) * 0.0005 + 1)
  obj.draw(position, 0, 0, clamp((obj.frame - i * 2) * 0.2, 0, 0.7))
end
obj.copybuffer("cache:ap", "tmp")
obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
for i = 1, #IMAGES do
  local image = IMAGES[i]
  local position = POSITIONS[i]
  position = position * ((obj.frame - i * 2) * 0.0005 + 1)
  obj.load("image", PED_DATA.path.."\\ap\\"..image..".png")
  local progress = clamp((obj.frame - i * 2) * 0.05, 0, 1)
  obj.draw(position, 0, 0, progress * 2, progress * -0.3 + 0.3)
end
obj.copybuffer("cache:ap_big", "tmp")

obj.setoption("drawtarget", "tempbuffer", obj.screen_w, obj.screen_h)
obj.copybuffer("obj", "cache:ap")
obj.draw()
obj.copybuffer("obj", "cache:ap_big")
obj.setoption("blend", 1)
obj.draw()
obj.setoption("blend", 0)
obj.copybuffer("obj", "tmp")